exit
real_estate.save
real_estate.zip_code = '08320310'
real_estate.save
real_estate.create
real_estate = Sequel::Model(:legal_risk_analysis_real_estates).new(legal_reference_id: '4b375bf0-912e-11e8-b621-d39d628bb530')
real_estate = Sequel::Model(:legal_risk_analysis_real_estates).all
real_estate = Sequel::Model(:legal_risk_analysis_real_estates).new
real_estate = Sequel::Model(:legal_risk_analysis_real_estates).new(
Sequel::Model(:legal_risk_analysis_real_estates).new
exit
Sequel::Model(:legal_risk_analysis_real_estates).all
Sequel::Model(:legal_risk_analysis_real_estates)[]
Sequel::Model(:legal_risk_analysis_real_estates)
Sequel::Model('legal_risk_analysis_real_estates')
Sequel[]
Sequel
c
exit
attributes[0].mapper
attributes
exit
mappings[Address]
mappings
attributes[0].mapper
attributes
exit
[true, true, false].any?(&:nil?)
[true, true, nil].any?(&:nil?)
[true, true].any?(&:nil?)
[true, nil].any?(&:nil?)
[true, nil].any?
[true].any?
[nil].any?
[nil].any?(:nil?)
[].any?
@mappings.values.each { |value| puts value.relationships.inspect } 
@mappings.values.each { |value| puts value.relationships } 
@mappings.values.each do
@mappings.values
@mappings
      @mappings.values.flat_map(&:relationships).each(&:mapper)
exit
@mappings.flat_map(&:count)
@mappings.flat_map
@mappings
c
Obstinacy.configuration
Obstinacy.configure
Obstinacy
c
Object.const_get(value_object_type.name + 'Mapper').attributes
c
Object.const_get(value_object_type.name + 'Mapper').attributes
Object.const_get(value_object_type.name + 'Mapper')
exit
Object.const_get(value_object_type.name + 'Mapper')
Object.const_get(value_object_type + 'Mapper')
self.attributes
attributes ||= []
attributes
exit
value_object_type
attributes
attribute
attributes
self
attributes
exit
Sequel::Model(mapper.table).all
Sequel::Model(mapper.table)
sequel_model
exit
RealEstateMapper.table
RealEstateMapper[RealEstate].table
RealEstateMapper[RealEstate]
RealEstateMapper
mapper.table
mapper
exit
RealEstateMapper.table
mapper.table
sequel_model
exit
real_estate = real_estates_repository.find_by_id('70cfe022-e317-4b02-81c3-63c9ee497fda')
real_estates_repository =RealEstatesRepository.new
RealEstatesRepository.new
c
sequel_model.type
exit
sequel_model.first
sequel_model.alienated
sequel_model.type
sequel_model
exit
@sequel_model.first
@sequel_model
@sequel_mode
exit
model.where(id: id).first
model.where(id: id)
model.first
model
exit
LegalReferenceMapper.relationships
LegalReferenceMapper.attributes
LegalReferenceMapper
c
LegalReferenceMapper
LegalReferenceMapper.attributes
RealEstateMapper.attributes
RealEstateMapper
table
block
blcok
table
exit
model.all[0].alienated
model.all[0].state
model.all[0]
model.all
model.first.zip_code
model.first.deleted_at
model.first
model
Configuration::Mapper[RealEstate].attributes
Configuration::Mapper[RealEstate]
model.first.address
model.first.condominium
model.first.legal_reference_id
model.first
model[1]
model.pk
model
exit
model.first
model
legal_reference.add_real_estate(nil)
legal_reference.real_estates = 'asda'
legal_reference.id = '123'
legal_reference
legal_reference.id = '123'
legal_reference.id
legal_reference = model.new
model.new
model
model[1]
model.pk
model
exit
seq[:legal_risk_analysis_legal_references].all
seq[:legal_risk_analysis_legal_references]
seq
exit
ecit
_table
exit
@relationships
relationships
@relationships
exit
@attributes
@relationships
exit
@attributes
c
@attributes
exit
@attributes
@attribute
self
exit
@entity
exit
methods
@entity
exit
entity
entity = LegalReference
entity
exit
mapper_class.instance_variables
mapper_class
exit
instance_variables
@entity
entity
entity LegalReference
@entity
exit
@entity
entity
entity LegalReference
@entity
exit
@entity
methods
entity LegalReference
superclass
methods
local_variables
variables
instance_variables
class_variables
exit
class_variables
variables
instance_variables
attributes
self.to_s
self.inspect
self
exit
methods
exit
methods
exit
methods
@entity
entity
exit
@entity
entity
entity = LegalReference
@entity
entity
exit
@entity
exit
@@entity
@entity
exit
@entity
self.methods
self.methods(false)
self.methods
exit
self
