exit
relationship.foreign_key
exit
relationship.foreign_key
relationship
relationship_fk
exit
entity
enitty
c
foreign_key
c
exit
persistence_model.save
asve
exit
persistence_model.save
persistence_model.save_changes
persistence_model
c
@in_memory_entities
exit
@in_memory_entities
exit
Sequel::Model.restrict_primary_key?
Sequel::Model.unrestrict_primary_key
Sequel::Model.restrict_primary_key?
Sequel::Model.restrict_primary_key
Sequel::Model.methods
Sequel::Model.unrestrict
Sequel::Model.unrestrict_primary_key
Sequel::Model.set_unrestrict_primary_key
Sequel::Model.unrestrict_primary_key
Sequel::Model.unrestrict_primary_key(true)
Sequel::Model.unrestrict_primary_key
Sequel::Model.methods
Sequel::Model
exit
@in_memory_entities
c
@in_memory_entities
exit
attributes
a
a.id = 5
a.id = '5'
a = Sequel::Model(@table_name).new(attributes)
Sequel::Model(@table_name).new(attributes, **{id: 5})
Sequel::Model(@table_name)
Sequel::Model(@table_name).new(attributes, **{id: 5})
Sequel::Model(@table_name).new(attributes)
attributes
exit
@in_memory_entities
exit
exit[
@in_memory_entities
c
exit
@in_memory_entities[0].relationships
@in_memory_entities[0].inspect
@in_memory_entities[0].relationships
@in_memory_entities[0].inspect
@in_memory_entities[0]
@in_memory_entities
c
@in_memory_entities
exit
@in_memory_entities
exit
relationships_to_persistence(entity)
exit
relationships_to_persistence(entity)
exit
mapper.to_persistence_model(entity)
exit
relationship.mapper.to_persistence_model(relationship_entity)
relationship.mapper
relationship_entity
exit
mapper.to_persistence_model(entity)
exit
mapper.to_persistence_model(entity)
c
attributes
c
attributes
exit
mapper
attributes
exit
exkit
mapper.to_persistence_model(entity)
exit
mapper.to_persistence_model(entity)
exit
@attributes
entity
c
exit
to_persistence_model(relationship_entity)
relationship_entity
c
exit
n
relationship_entities
n
entity.send(relationship.attribute_name)
entity
c
entity
exit
mapper.to_persistence_model(entity)
mapper = get_mapper_from_entity(entity)
mapper.to_persistence_model(entity)
exit
mapper.to_persistence_model(entity)
mapper = get_mapper_from_entity(entity)
exit
@in_memory_entities
@in_memories_entities
@in_mememories_entities
exit
relationship
exit
relationships
exit
persistence_model.save_changes
persistence_model
n
persistence_model
entity
exit
entity
persistence_model
exit
persistence_model.save_changes
persistence_model = Sequel::Model(mapper.table_name).new(attributes)
attributes
exit
@in_memory_entities
@in_memoery_entities
exit
in_memory_entities[entity.class]
in_memory_entities[entity.class]exit
@in_memory_entities
@in_mememory_entities
exit
persistence_model
sequel_model
exit
sequel_model
exit
mapper.map_from_entity(entity)
exit
mapper
c
n
entity
exit
c
C
persistence_model.merge!(street: 123)
persistence_model
c
entity
persistence_model
c
persistence_model
persistence_model.merge!(map_attributes(entity))
persistence_model.merge(map_attributes(entity))
persistence_model
persistence_model.merge(map_attributes(entity))
exit
map_value_objects(entity)
map_attributes(entity)
exit
persistence_model
entity
c
entity
exit
persistence_model
entity
c
persistence_model
entity
c
entity
persistence_model
c
entity
value_object
persistence_model
c
persistence_model
c
persistence_model
exit
persistence_model
c
persistence_model
exit
persistence_model[:type]
persistence_model[:type
persistence_model
persistence_moodel
persistence_model
exit
c
exit
entity.send(value_object.attribute_name)
persistence_model[value_object.attribute_name] = value_object.mapper.map_from_entity(entity.send(value_object.attribute_name))
persistence_model[value_object.attribute_name] = value_object.mapper
persistence_model[value_object.attribute_name]
value_object.attribute_name
persistence_model
value_object.attribute_name
exit
value_object.attribute_name
exit
real_estate
real_estate = Sequel::Model(@table_name).new(persistence_model)
real_estate = Sequel::Model(@table_name).new
Sequel::Model(@table_name).new
Sequel::Model(@table_name)
exit
persistence_model
exit
persistence_model.save_changes
persistence_model
@attributes
persistence_model
exit
c
exit
"attribute=".to_sym
"attribute=".to_s
persistence_model.send(:type=, "15")
persistence_model.send("type= 15")
persistence_model.send("type = 15")
"#{attribute.to_s} = 'algo'"
c
@attributes[0].to_s
@attributes
exit
:a.to_s
:a
@attributes
persistence_model.type = 'apartment'
persistence_model
exit
Obstinacy.configuration.mappings[RealEstate].map_from_entity(real_estate)
real_estate = RealEstate.new(type: 5, alienated: 5, condominium: 5, address: nil)
Obstinacy.configuration.mappings[RealEstate].map_from_entity(real_estate)
exit
